To split this project into two Spring applications—one for batch processing (Spring Batch for EMA calculation) and the other as a REST API (Spring Web to fetch EMA data)—you would have the following structure:

1. Application 1: Spring Batch for EMA Calculation (Batch App)
This application handles the EMA calculation using Spring Batch, processes trades, and stores the results in the database.

2. Application 2: Spring Web for Fetching EMA Data (Web App)
This application serves as a REST API to fetch the EMA data from the database.

1. Batch App (EMA Calculation) - Spring Batch
File Structure:
bash
Copy code
src/main/java
├── com
│   └── example
│       └── emabatch
│           ├── EmaBatchApplication.java           # Main Spring Boot Application class
│           ├── config
│           │   ├── BatchConfig.java               # Spring Batch Configuration
│           │   └── TaskExecutorConfig.java        # Task Executor for multithreading
│           ├── domain
│           │   └── Trade.java                     # Trade Entity
│           ├── partitioner
│           │   └── SymbolPartitioner.java         # Partitioner class for symbols
│           ├── processor
│           │   └── EmaProcessor.java              # Processor for EMA calculation
│           ├── reader
│           │   └── TradeItemReader.java           # Reader to fetch trades for each symbol
│           ├── repository
│           │   └── TradeRepository.java           # JPA Repository for trade data
│           ├── service
│           │   └── EmaCalculator.java             # Utility class for EMA calculation logic
│           └── writer
│               └── TradeWriter.java               # Writer to save the processed EMA
Main Application (EmaBatchApplication.java):
java
Copy code
@SpringBootApplication
@EnableBatchProcessing
public class EmaBatchApplication implements CommandLineRunner {

    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Job emaJob;

    public static void main(String[] args) {
        SpringApplication.run(EmaBatchApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        JobParameters params = new JobParametersBuilder()
                .addLong("startAt", System.currentTimeMillis())
                .toJobParameters();
        jobLauncher.run(emaJob, params);
    }
}
BatchConfig.java:
Defines the batch job with partitioning.

java
Copy code
@Configuration
public class BatchConfig {
    @Autowired
    private StepBuilderFactory stepBuilderFactory;
    @Autowired
    private JobBuilderFactory jobBuilderFactory;
    @Autowired
    private EmaProcessor emaProcessor;
    @Autowired
    private TradeWriter tradeWriter;

    @Bean
    public Step calculateEmaStep() {
        return stepBuilderFactory.get("calculateEmaStep")
                .<Trade, Trade>chunk(10)
                .reader(tradeItemReader(null))
                .processor(emaProcessor)
                .writer(tradeWriter)
                .faultTolerant()
                .retryLimit(3)
                .retry(Exception.class)
                .skipLimit(5)
                .skip(Exception.class)
                .taskExecutor(taskExecutor())
                .throttleLimit(4)
                .build();
    }

    @Bean
    public Step partitionedStep() {
        return stepBuilderFactory.get("partitionedStep")
                .partitioner("calculateEmaStep", new SymbolPartitioner())
                .step(calculateEmaStep())
                .gridSize(4)
                .taskExecutor(taskExecutor())
                .build();
    }

    @Bean
    public Job emaJob() {
        return jobBuilderFactory.get("emaJob")
                .start(partitionedStep())
                .build();
    }
}
TaskExecutorConfig.java:
java
Copy code
@Configuration
public class TaskExecutorConfig {
    @Bean
    public TaskExecutor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(4);
        executor.setMaxPoolSize(8);
        executor.setQueueCapacity(100);
        executor.setThreadNamePrefix("EMA-Thread-");
        executor.initialize();
        return executor;
    }
}
Repository (TradeRepository.java):
java
Copy code
public interface TradeRepository extends JpaRepository<Trade, Long> {
    @Query("SELECT t FROM Trade t WHERE t.symbol = :symbol ORDER BY t.tradeDate ASC")
    List<Trade> findBySymbolOrdered(@Param("symbol") String symbol);

    @Query("SELECT DISTINCT t.symbol FROM Trade t")
    List<String> findDistinctSymbols();
}
POM.xml (Batch App)
xml
Copy code
<dependencies>
    <!-- Spring Boot & Batch -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-batch</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <!-- Database -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>
2. Web App (REST API) - Spring Web
File Structure:
bash
Copy code
src/main/java
├── com
│   └── example
│       └── emaweb
│           ├── EmaWebApplication.java             # Main Spring Boot Application class
│           ├── controller
│           │   └── TradeController.java           # REST Controller to fetch EMA data
│           ├── domain
│           │   └── Trade.java                     # Trade Entity (same as batch)
│           ├── repository
│           │   └── TradeRepository.java           # JPA Repository for fetching trade data
Main Application (EmaWebApplication.java):
java
Copy code
@SpringBootApplication
public class EmaWebApplication {

    public static void main(String[] args) {
        SpringApplication.run(EmaWebApplication.class, args);
    }
}
Controller (TradeController.java):
java
Copy code
@RestController
@RequestMapping("/api/trades")
public class TradeController {

    @Autowired
    private TradeRepository tradeRepository;

    @GetMapping("/{symbol}")
    public List<Trade> getTradesBySymbol(@PathVariable String symbol) {
        return tradeRepository.findBySymbolOrdered(symbol);
    }

    @GetMapping("/all")
    public List<Trade> getAllTrades() {
        return tradeRepository.findAll();
    }
}
Repository (TradeRepository.java):
The same repository as used in the batch app.

java
Copy code
public interface TradeRepository extends JpaRepository<Trade, Long> {
    @Query("SELECT t FROM Trade t WHERE t.symbol = :symbol ORDER BY t.tradeDate ASC")
    List<Trade> findBySymbolOrdered(@Param("symbol") String symbol);
}
POM.xml (Web App)
xml
Copy code
<dependencies>
    <!-- Spring Boot & Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- Database -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>
How to Run Both Apps
1. Batch App (EMA Calculation)
Step 1: Start the Spring Batch application (EmaBatchApplication.java).
Step 2: This will process all trades in the database and calculate their EMA values.
To run the batch app:

bash
Copy code
mvn spring-boot:run
2. Web App (Fetch EMA Data)
Step 1: Start the Spring Web application (EmaWebApplication.java).
Step 2: You can now access the API to fetch EMA data.
To run the web app:

bash
Copy code
mvn spring-boot:run
Example API Calls:
Get all trades:

bash
Copy code
GET http://localhost:8080/api/trades/all
Get trades by symbol:

bash
Copy code
GET http://localhost:8080/api/trades/{symbol}
Database Connection:

Both applications should connect to the same database (H2, MySQL, etc.).
Configure the same application.properties for both apps with the same database URL and credentials to ensure both apps share the data.
Integration: The Batch App performs the EMA calculation, stores the result in the shared database, and the Web App exposes an API to fetch the EMA data.
