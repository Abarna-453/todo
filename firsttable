Create Tables
1. Roles
CREATE TABLE Roles (
    role_id VARCHAR2(36) PRIMARY KEY,
    role_name VARCHAR2(50) NOT NULL UNIQUE
);

2. Department
CREATE TABLE Department (
    depart_id VARCHAR2(36) PRIMARY KEY,
    depart_name VARCHAR2(100) NOT NULL UNIQUE
);

3. Designation
CREATE TABLE Designation (
    designation_id VARCHAR2(36) PRIMARY KEY,
    d_name VARCHAR2(100) NOT NULL UNIQUE,
    fixed_salary NUMBER(15) NOT NULL
);

4. Credentials
CREATE TABLE Credentials (
    uid NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_id VARCHAR2(36) NOT NULL,
    email VARCHAR2(100) NOT NULL UNIQUE,
    password VARCHAR2(255) NOT NULL,
    CONSTRAINT fk_credentials_role
        FOREIGN KEY (role_id)
        REFERENCES Roles(role_id)
        ON DELETE CASCADE
);

5. Users
CREATE TABLE Users (
    uid VARCHAR2(36) PRIMARY KEY,
    role_id VARCHAR2(36) NOT NULL,
    name VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL UNIQUE,
    password VARCHAR2(255) NOT NULL,
    phone_no NUMBER(15),
    pancard_no NUMBER(12),
    CONSTRAINT fk_users_role
        FOREIGN KEY (role_id)
        REFERENCES Roles(role_id)
        ON DELETE SET NULL
);

6. TaxSlab
CREATE TABLE TaxSlab (
    tax_slab_id VARCHAR2(36) PRIMARY KEY,
    regime_type VARCHAR2(20) NOT NULL,
    min_range NUMBER NOT NULL,
    max_range NUMBER,
    tax_rate NUMBER(5,2) NOT NULL,
    standard_deduction NUMBER,
    rebate_limit NUMBER,
    rebate_amt NUMBER
);

7. AuditStatus
CREATE TABLE AuditStatus (
    audit_status_id VARCHAR2(36) PRIMARY KEY,
    audit_status_name VARCHAR2(20) NOT NULL UNIQUE
);

8. TaxfileStatus
CREATE TABLE TaxfileStatus (
    taxfile_status_id VARCHAR2(36) PRIMARY KEY,
    tax_status_name VARCHAR2(20) NOT NULL UNIQUE
);

9. Employee
CREATE TABLE Employee (
    empid VARCHAR2(36) PRIMARY KEY,
    uid VARCHAR2(36) NOT NULL UNIQUE,
    investid VARCHAR2(36),
    depart_id VARCHAR2(36) NOT NULL,
    designation_id VARCHAR2(36) NOT NULL,
    tax_detailsid VARCHAR2(36),
    hra NUMBER,
    health_insurance NUMBER,
    base_salary NUMBER,
    additional_allowances NUMBER,
    total_income NUMBER,
    bonus NUMBER,
    date_of_join DATE,
    CONSTRAINT fk_employee_user
        FOREIGN KEY (uid)
        REFERENCES Users(uid)
        ON DELETE CASCADE,
    CONSTRAINT fk_employee_department
        FOREIGN KEY (depart_id)
        REFERENCES Department(depart_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_employee_designation
        FOREIGN KEY (designation_id)
        REFERENCES Designation(designation_id)
        ON DELETE SET NULL
);

10. InvestmentDetails
CREATE TABLE InvestmentDetails (
    investid VARCHAR2(36) PRIMARY KEY,
    empid VARCHAR2(36) NOT NULL,
    in_type VARCHAR2(50),
    in_amt DOUBLE PRECISION,
    invest_date DATE,
    CONSTRAINT fk_invest_emp
        FOREIGN KEY (empid)
        REFERENCES Employee(empid)
        ON DELETE CASCADE
);
Note: To handle the circular dependency between Employee and InvestmentDetails, the foreign key for investid in the Employee table is added after both tables are created.
ALTER TABLE Employee
ADD CONSTRAINT fk_employee_invest
    FOREIGN KEY (investid)
    REFERENCES InvestmentDetails(investid)
    ON DELETE SET NULL;

11. TaxDetails
CREATE TABLE TaxDetails (
    taxdetails_id VARCHAR2(36) PRIMARY KEY,
    uid VARCHAR2(36) NOT NULL,
    taxslab_id VARCHAR2(36) NOT NULL,
    empid VARCHAR2(36) NOT NULL,
    total_income NUMBER,
    taxPaid DOUBLE PRECISION,
    taxdue DOUBLE PRECISION,
    financial_year NUMBER(4),
    gross_salary NUMBER,
    net_salary NUMBER,
    hra_exemption NUMBER,
    standard_deduction NUMBER,
    tax_Liability NUMBER,
    rebate_section_87a VARCHAR2(1) CHECK (rebate_section_87a IN ('Y','N')),
    final_tax_liability NUMBER,
    tax_details_date DATE,
    CONSTRAINT fk_taxdetails_user
        FOREIGN KEY (uid)
        REFERENCES Users(uid)
        ON DELETE CASCADE,
    CONSTRAINT fk_taxdetails_taxslab
        FOREIGN KEY (taxslab_id)
        REFERENCES TaxSlab(tax_slab_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_taxdetails_employee
        FOREIGN KEY (empid)
        REFERENCES Employee(empid)
        ON DELETE CASCADE
);

12. AuditLogs
CREATE TABLE AuditLogs (
    audit_id VARCHAR2(36) PRIMARY KEY,
    uid VARCHAR2(36) NOT NULL,
    emp_id VARCHAR2(36) NOT NULL,
    tax_details_id VARCHAR2(36) NOT NULL,
    audit_status_id VARCHAR2(36) NOT NULL,
    comment VARCHAR2(500),
    audit_date DATE,
    CONSTRAINT fk_auditlogs_user
        FOREIGN KEY (uid)
        REFERENCES Users(uid)
        ON DELETE CASCADE,
    CONSTRAINT fk_auditlogs_employee
        FOREIGN KEY (emp_id)
        REFERENCES Employee(empid)
        ON DELETE CASCADE,
    CONSTRAINT fk_auditlogs_taxdetails
        FOREIGN KEY (tax_details_id)
        REFERENCES TaxDetails(taxdetails_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_auditlogs_auditstatus
        FOREIGN KEY (audit_status_id)
        REFERENCES AuditStatus(audit_status_id)
        ON DELETE SET NULL
);

13. AnnualTaxFilingDetails
CREATE TABLE AnnualTaxFilingDetails (
    annualfiling_id VARCHAR2(36) PRIMARY KEY,
    uid VARCHAR2(36) NOT NULL,
    total_deduction NUMBER,
    total_claims NUMBER,
    total_returns NUMBER,
    filing_date DATE,
    description VARCHAR2(500),
    year NUMBER(4),
    CONSTRAINT fk_annualfiling_user
        FOREIGN KEY (uid)
        REFERENCES Users(uid)
        ON DELETE CASCADE
);

14. TaxReturn
CREATE TABLE TaxReturn (
    taxreturn_id VARCHAR2(36) PRIMARY KEY,
    empid VARCHAR2(36) NOT NULL,
    uid VARCHAR2(36) NOT NULL,
    tax_details_id VARCHAR2(36) NOT NULL,
    taxfile_status_id VARCHAR2(36) NOT NULL,
    return_amt NUMBER,
    return_date DATE,
    return_description VARCHAR2(500),
    submission_date DATE,
    CONSTRAINT fk_taxreturn_employee
        FOREIGN KEY (empid)
        REFERENCES Employee(empid)
        ON DELETE CASCADE,
    CONSTRAINT fk_taxreturn_user
        FOREIGN KEY (uid)
        REFERENCES Users(uid)
        ON DELETE CASCADE,
    CONSTRAINT fk_taxreturn_taxdetails
        FOREIGN KEY (tax_details_id)
        REFERENCES TaxDetails(taxdetails_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_taxreturn_taxfilestatus
        FOREIGN KEY (taxfile_status_id)
        REFERENCES TaxfileStatus(taxfile_status_id)
        ON DELETE SET NULL
);

15. TaxClaim
CREATE TABLE TaxClaim (
    taxclaim_id VARCHAR2(36) PRIMARY KEY,
    empid VARCHAR2(36) NOT NULL,
    uid VARCHAR2(36) NOT NULL,
    tax_details_id VARCHAR2(36) NOT NULL,
    taxfile_status_id VARCHAR2(36) NOT NULL,
    claim_amt NUMBER,
    claim_date DATE,
    claim_description VARCHAR2(500),
    submission_date DATE,
    CONSTRAINT fk_taxclaim_employee
        FOREIGN KEY (empid)
        REFERENCES Employee(empid)
        ON DELETE CASCADE,
    CONSTRAINT fk_taxclaim_user
        FOREIGN KEY (uid)
        REFERENCES Users(uid)
        ON DELETE CASCADE,
    CONSTRAINT fk_taxclaim_taxdetails
        FOREIGN KEY (tax_details_id)
        REFERENCES TaxDetails(taxdetails_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_taxclaim_taxfilestatus
        FOREIGN KEY (taxfile_status_id)
        REFERENCES TaxfileStatus(taxfile_status_id)
        ON DELETE SET NULL
);

Insert Sample Data
1. Roles
-- Insert Roles
INSERT INTO Roles (role_id, role_name) VALUES ('1', 'Employee');
INSERT INTO Roles (role_id, role_name) VALUES ('2', 'TaxAuditor');
INSERT INTO Roles (role_id, role_name) VALUES ('3', 'System Admin');

2. Department
-- Insert Departments
INSERT INTO Department (depart_id, depart_name) VALUES ('d1', 'Engineering');
INSERT INTO Department (depart_id, depart_name) VALUES ('d2', 'Human Resources');
INSERT INTO Department (depart_id, depart_name) VALUES ('d3', 'Finance');

3. Designation
-- Insert Designations
INSERT INTO Designation (designation_id, d_name, fixed_salary) VALUES ('des1', 'Junior Engineer', 500000);
INSERT INTO Designation (designation_id, d_name, fixed_salary) VALUES ('des2', 'Senior Engineer', 800000);
INSERT INTO Designation (designation_id, d_name, fixed_salary) VALUES ('des3', 'Manager', 1200000);

4. Credentials
-- Insert Credentials for System Admin
INSERT INTO Credentials (role_id, email, password) VALUES ('3', 'admin@company.com', 'adminpass');

-- Insert Credentials for Tax Auditor
INSERT INTO Credentials (role_id, email, password) VALUES ('2', 'taxauditor@company.com', 'taxpass');

-- Insert Credentials for Employee
INSERT INTO Credentials (role_id, email, password) VALUES ('1', 'employee1@company.com', 'emppass1');

5. Users
-- Insert System Admin User
INSERT INTO Users (uid, role_id, name, email, password, phone_no, pancard_no)
VALUES ('u1', '3', 'Admin User', 'admin@company.com', 'adminpass', 9876543210, 123456789012);

-- Insert Tax Auditor User
INSERT INTO Users (uid, role_id, name, email, password, phone_no, pancard_no)
VALUES ('u2', '2', 'Tax Auditor', 'taxauditor@company.com', 'taxpass', 9876543211, 123456789013);

-- Insert Employee User
INSERT INTO Users (uid, role_id, name, email, password, phone_no, pancard_no)
VALUES ('u3', '1', 'Employee One', 'employee1@company.com', 'emppass1', 9876543212, 123456789014);

6. Employee
-- Insert Employee
INSERT INTO Employee (empid, uid, depart_id, designation_id, hra, health_insurance, base_salary, additional_allowances, total_income, bonus, date_of_join)
VALUES ('e1', 'u3', 'd1', 'des1', 100000, 20000, 500000, 50000, 450000, 50000, DATE '2023-04-01');

7. InvestmentDetails
-- Insert InvestmentDetails for Employee 'e1'
INSERT INTO InvestmentDetails (investid, empid, in_type, in_amt, invest_date)
VALUES ('i1', 'e1', 'LIC Premium', 50000, DATE '2023-05-01');

-- Update Employee with investid
UPDATE Employee
SET investid = 'i1'
WHERE empid = 'e1';

8. TaxSlab
-- Insert Tax Slabs
INSERT INTO TaxSlab (tax_slab_id, regime_type, min_range, max_range, tax_rate, standard_deduction, rebate_limit, rebate_amt)
VALUES ('ts1', 'Old', 0, 250000, 0, 50000, NULL, NULL);

INSERT INTO TaxSlab (tax_slab_id, regime_type, min_range, max_range, tax_rate, standard_deduction, rebate_limit, rebate_amt)
VALUES ('ts2', 'Old', 250001, 500000, 5, 50000, NULL, NULL);

INSERT INTO TaxSlab (tax_slab_id, regime_type, min_range, max_range, tax_rate, standard_deduction, rebate_limit, rebate_amt)
VALUES ('ts3', 'New', 0, 250000, 0, 50000, 700000, 5000);

9. TaxDetails
-- Insert TaxDetails for Employee 'e1'
INSERT INTO TaxDetails (taxdetails_id, uid, taxslab_id, empid, total_income, taxPaid, taxdue, financial_year, gross_salary, net_salary, hra_exemption, standard_deduction, tax_Liability, rebate_section_87a, final_tax_liability, tax_details_date)
VALUES ('td1', 'u3', 'ts1', 'e1', 450000, 22500, 0, 2023, 450000, 400000, 100000, 50000, 22500, 'Y', 22500, DATE '2023-03-31');

10. AuditStatus
-- Insert Audit Statuses
INSERT INTO AuditStatus (audit_status_id, audit_status_name) VALUES ('as1', 'Approved');
INSERT INTO AuditStatus (audit_status_id, audit_status_name) VALUES ('as2', 'InProgress');
INSERT INTO AuditStatus (audit_status_id, audit_status_name) VALUES ('as3', 'Pending');
INSERT INTO AuditStatus (audit_status_id, audit_status_name) VALUES ('as4', 'Rejected');

11. TaxfileStatus
-- Insert Tax File Statuses
INSERT INTO TaxfileStatus (taxfile_status_id, tax_status_name) VALUES ('tfs1', 'Approved');
INSERT INTO TaxfileStatus (taxfile_status_id, tax_status_name) VALUES ('tfs2', 'InProgress');
INSERT INTO TaxfileStatus (taxfile_status_id, tax_status_name) VALUES ('tfs3', 'Pending');
INSERT INTO TaxfileStatus (taxfile_status_id, tax_status_name) VALUES ('tfs4', 'Rejected');

12. AuditLogs
-- Insert AuditLog
INSERT INTO AuditLogs (audit_id, uid, emp_id, tax_details_id, audit_status_id, comment, audit_date)
VALUES ('al1', 'u2', 'e1', 'td1', 'as3', 'Initial audit pending', DATE '2023-04-15');

13. AnnualTaxFilingDetails
-- Insert AnnualTaxFilingDetails
INSERT INTO AnnualTaxFilingDetails (annualfiling_id, uid, total_deduction, total_claims, total_returns, filing_date, description, year)
VALUES ('afd1', 'u1', 500000, 2000, 5000, DATE '2024-03-31', 'Annual Tax Filing for FY 2023-24', 2024);

14. TaxReturn
-- Insert TaxReturn
INSERT INTO TaxReturn (taxreturn_id, empid, uid, tax_details_id, taxfile_status_id, return_amt, return_date, return_description, submission_date)
VALUES ('tr1', 'e1', 'u3', 'td1', 'tfs3', 5000, DATE '2023-07-01', 'Return for FY 2023-24', DATE '2023-06-30');

15. TaxClaim
-- Insert TaxClaim
INSERT INTO TaxClaim (taxclaim_id, empid, uid, tax_details_id, taxfile_status_id, claim_amt, claim_date, claim_description, submission_date)
VALUES ('tc1', 'e1', 'u3', 'td1', 'tfs2', 2000, DATE '2023-08-01', 'Claim for overpaid tax', DATE '2023-07-31');

Update Statements
1. Update Employee's Bonus
UPDATE Employee
SET bonus = 60000
WHERE empid = 'e1';

2. Update AuditLog Status to Approved
UPDATE AuditLogs
SET audit_status_id = 'as1', comment = 'Audit approved'
WHERE audit_id = 'al1';

3. Update TaxReturn Status to Approved
UPDATE TaxReturn
SET taxfile_status_id = 'tfs1', return_description = 'Return approved'
WHERE taxreturn_id = 'tr1';


Select Statements
1. Select All Employees with Designation and Department
SELECT e.empid, u.name, d.d_name AS designation, dep.depart_name
FROM Employee e
JOIN Users u ON e.uid = u.uid
JOIN Designation d ON e.designation_id = d.designation_id
JOIN Department dep ON e.depart_id = dep.depart_id;

2. Select Tax Details for a Specific Employee
SELECT td.taxdetails_id, td.total_income, td.taxPaid, td.taxdue, ts.tax_rate
FROM TaxDetails td
JOIN TaxSlab ts ON td.taxslab_id = ts.tax_slab_id
WHERE td.empid = 'e1';

3. Select Audit Logs with Status Names
SELECT al.audit_id, u.name, ts.audit_status_name, al.comment, al.audit_date
FROM AuditLogs al
JOIN Users u ON al.uid = u.uid
JOIN AuditStatus ts ON al.audit_status_id = ts.audit_status_id
WHERE al.emp_id = 'e1';

4. Select Employees with Investment Details
SELECT e.empid, u.name, id.in_type, id.in_amt, id.invest_date
FROM Employee e
JOIN Users u ON e.uid = u.uid
JOIN InvestmentDetails id ON e.empid = id.empid;

5. Select Tax Return Details
SELECT tr.taxreturn_id, u.name, tr.return_amt, tr.return_date, tfs.tax_status_name
FROM TaxReturn tr
JOIN Users u ON tr.uid = u.uid
JOIN TaxfileStatus tfs ON tr.taxfile_status_id = tfs.taxfile_status_id
WHERE tr.empid = 'e1';


Soft Delete:
Instead of physically deleting the user record from the database, you can add a column (e.g., is_deleted or status) to the user table. When a user is "deleted," you simply update this column to indicate that the user is inactive or deleted.
This allows you to retain all related data while keeping the user record in the same table. You can filter out inactive users in your queries by checking the is_deleted status.
Example:

ALTER TABLE Users ADD COLUMN is_deleted TINYINT DEFAULT 0;

-- To delete a user
UPDATE Users SET is_deleted = 1 WHERE uid = 'user_id';
Move to a Deleted Users Table:
Another approach is to create a separate table (e.g., DeletedUsers) where you move the user record when they are deleted. This keeps the main user table clean and improves performance, especially as the number of records grows.
You would need to ensure that all related records in other tables are also moved or updated to reference the DeletedUsers table.
Example:

CREATE TABLE DeletedUsers AS SELECT * FROM Users WHERE 1=0; -- Create an empty table with the same structure

-- To delete a user
INSERT INTO DeletedUsers SELECT * FROM Users WHERE uid = 'user_id';
DELETE FROM Users WHERE uid = 'user_id';
Audit Trail with Triggers:
You can use database triggers to automatically log deleted records into an audit table whenever a delete operation occurs. This way, you can keep track of all deletions without modifying the original tables.
The audit table can store the deleted record's data along with a timestamp and the user who performed the deletion.
Example:


CREATE TABLE UserAudit (
    uid INT,
    deleted_at DATETIME,
    deleted_by INT,
    -- other relevant fields
);

CREATE TRIGGER before_user_delete
BEFORE DELETE ON Users
FOR EACH ROW
BEGIN
    INSERT INTO UserAudit (uid, deleted_at, deleted_by)
    VALUES (OLD.uid, NOW(), CURRENT_USER());
END;
