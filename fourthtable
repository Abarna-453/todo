Here’s the CRUD operation implementation for User Details with its file structure integrated into the previously provided code structure.

Frontend (Angular)
Updated Folder Structure
lua
Copy code
src/
|-- app/
    |-- user/
        |-- user-list/
            |-- user-list.component.html
            |-- user-list.component.ts
        |-- user-detail/
            |-- user-detail.component.html
            |-- user-detail.component.ts
    |-- shared/
        |-- services/
            |-- user.service.ts
1. app-routing.module.ts
Add routes for user CRUD operations.

typescript
Copy code
const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'signup', component: SignupComponent },
  { path: 'annual-filing', component: AnnualTaxFilingComponent },
  { path: 'users', component: UserListComponent },
  { path: 'users/:id', component: UserDetailComponent },
  { path: '', redirectTo: 'login', pathMatch: 'full' }
];
2. User List Component
user-list.component.html
html
Copy code
<div class="user-list">
  <button mat-raised-button color="primary" (click)="addUser()">Add User</button>
  <table mat-table [dataSource]="users" class="mat-elevation-z8">
    <ng-container matColumnDef="id">
      <th mat-header-cell *matHeaderCellDef>ID</th>
      <td mat-cell *matCellDef="let user">{{ user.id }}</td>
    </ng-container>
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef>Name</th>
      <td mat-cell *matCellDef="let user">{{ user.name }}</td>
    </ng-container>
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>Actions</th>
      <td mat-cell *matCellDef="let user">
        <button mat-button (click)="editUser(user.id)">Edit</button>
        <button mat-button (click)="deleteUser(user.id)">Delete</button>
      </td>
    </ng-container>
    <tr mat-header-row *matHeaderRowDef="['id', 'name', 'actions']"></tr>
    <tr mat-row *matRowDef="let row; columns: ['id', 'name', 'actions']"></tr>
  </table>
</div>
user-list.component.ts
typescript
Copy code
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { UserService } from '../../shared/services/user.service';

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html',
  styleUrls: ['./user-list.component.css']
})
export class UserListComponent implements OnInit {
  users: any[] = [];

  constructor(private userService: UserService, private router: Router) {}

  ngOnInit(): void {
    this.userService.getAllUsers().subscribe(data => {
      this.users = data;
    });
  }

  addUser() {
    this.router.navigate(['/users/0']);
  }

  editUser(id: number) {
    this.router.navigate([`/users/${id}`]);
  }

  deleteUser(id: number) {
    this.userService.deleteUser(id).subscribe(() => {
      this.users = this.users.filter(user => user.id !== id);
    });
  }
}
3. User Detail Component
user-detail.component.html
html
Copy code
<form [formGroup]="userForm" (ngSubmit)="onSubmit()">
  <mat-form-field>
    <input matInput placeholder="Name" formControlName="name" />
  </mat-form-field>
  <mat-form-field>
    <input matInput placeholder="Phone No" formControlName="phoneNo" />
  </mat-form-field>
  <mat-form-field>
    <input matInput placeholder="PAN Card" formControlName="pancard" />
  </mat-form-field>
  <button mat-raised-button color="primary">Save</button>
</form>
user-detail.component.ts
typescript
Copy code
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { UserService } from '../../shared/services/user.service';

@Component({
  selector: 'app-user-detail',
  templateUrl: './user-detail.component.html',
  styleUrls: ['./user-detail.component.css']
})
export class UserDetailComponent implements OnInit {
  userForm: FormGroup;
  userId: number;

  constructor(
    private fb: FormBuilder,
    private userService: UserService,
    private route: ActivatedRoute,
    private router: Router
  ) {
    this.userForm = this.fb.group({
      name: [''],
      phoneNo: [''],
      pancard: ['']
    });
    this.userId = 0;
  }

  ngOnInit(): void {
    this.userId = Number(this.route.snapshot.paramMap.get('id'));
    if (this.userId) {
      this.userService.getUserById(this.userId).subscribe(user => {
        this.userForm.patchValue(user);
      });
    }
  }

  onSubmit() {
    if (this.userId) {
      this.userService.updateUser(this.userId, this.userForm.value).subscribe(() => {
        this.router.navigate(['/users']);
      });
    } else {
      this.userService.addUser(this.userForm.value).subscribe(() => {
        this.router.navigate(['/users']);
      });
    }
  }
}
4. User Service
typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private apiUrl = 'http://localhost:8080/api/users';

  constructor(private http: HttpClient) {}

  getAllUsers(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  getUserById(id: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/${id}`);
  }

  addUser(user: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, user);
  }

  updateUser(id: number, user: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${id}`, user);
  }

  deleteUser(id: number): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${id}`);
  }
}
Backend (Spring Boot)
UserController.java
java
Copy code
@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping
    public List<User> getAllUsers() {
        return userService.getAllUsers();
    }

    @GetMapping("/{id}")
    public User getUserById(@PathVariable Long id) {
        return userService.getUserById(id);
    }

    @PostMapping
    public User addUser(@RequestBody User user) {
        return userService.addUser(user);
    }

    @PutMapping("/{id}")
    public User updateUser(@PathVariable Long id, @RequestBody User user) {
        return userService.updateUser(id, user);
    }

    @DeleteMapping("/{id}")
    public void deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
    }
}






To implement a PATCH request for updating a UserEntity (specifically for phoneNo and panCardNo) while maintaining the relationships with CredsEntity and RolesEntity, you will need to create a service, service implementation, controller, and the required DTOs for this update operation. Below is an example implementation using Spring Boot.

1. DTO for Update Request
We’ll use a Data Transfer Object (DTO) to represent the data that can be updated (in this case, phoneNo and panCardNo).

UserUpdateDTO.java
java
Copy code
package com.bms.bms_spring_boot_rest_data_project.dto;

public class UserUpdateDTO {
    private String phoneNo;
    private String panCardNo;

    // Getters and Setters
    public String getPhoneNo() {
        return phoneNo;
    }

    public void setPhoneNo(String phoneNo) {
        this.phoneNo = phoneNo;
    }

    public String getPanCardNo() {
        return panCardNo;
    }

    public void setPanCardNo(String panCardNo) {
        this.panCardNo = panCardNo;
    }
}
2. Service Interface
The service interface defines the update functionality.

UserService.java
java
Copy code
package com.bms.bms_spring_boot_rest_data_project.service;

import com.bms.bms_spring_boot_rest_data_project.dto.UserUpdateDTO;

public interface UserService {
    void updateUserDetails(Long userId, UserUpdateDTO userUpdateDTO);
}
3. Service Implementation
The service implementation will handle the logic for updating the UserEntity by fetching the user from the database, modifying the necessary fields (phoneNo and panCardNo), and saving the changes.

UserServiceImpl.java
java
Copy code
package com.bms.bms_spring_boot_rest_data_project.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.bms.bms_spring_boot_rest_data_project.dao.UserInfoDao;
import com.bms.bms_spring_boot_rest_data_project.dao.entity.UserInfoEntity;
import com.bms.bms_spring_boot_rest_data_project.dto.UserUpdateDTO;
import com.bms.bms_spring_boot_rest_data_project.service.UserService;
import java.util.Optional;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserInfoDao userInfoDao;

    @Override
    public void updateUserDetails(Long userId, UserUpdateDTO userUpdateDTO) {
        Optional<UserInfoEntity> userEntityOptional = userInfoDao.findById(userId);

        if (userEntityOptional.isPresent()) {
            UserInfoEntity userEntity = userEntityOptional.get();
            
            // Update the phone number and PAN card number
            userEntity.setPhoneNo(userUpdateDTO.getPhoneNo());
            userEntity.setPanCardNo(userUpdateDTO.getPanCardNo());
            
            // Save the updated entity
            userInfoDao.save(userEntity);
        } else {
            throw new RuntimeException("User not found with id " + userId);
        }
    }
}
4. Controller
The controller will map the PATCH request to the appropriate service method, passing the UserUpdateDTO for updating phoneNo and panCardNo.

UserController.java
java
Copy code
package com.bms.bms_spring_boot_rest_data_project.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import com.bms.bms_spring_boot_rest_data_project.dto.UserUpdateDTO;
import com.bms.bms_spring_boot_rest_data_project.service.UserService;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserService userService;

    // PatchMapping to update phoneNo and panCardNo
    @PatchMapping("/{userId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void updateUser(@PathVariable Long userId, @RequestBody UserUpdateDTO userUpdateDTO) {
        userService.updateUserDetails(userId, userUpdateDTO);
    }
}
5. DAO (Data Access Object)
The DAO layer is assumed to have basic findById() and save() methods. Here’s an example for UserInfoDao.

UserInfoDao.java
java
Copy code
package com.bms.bms_spring_boot_rest_data_project.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import com.bms.bms_spring_boot_rest_data_project.dao.entity.UserInfoEntity;

public interface UserInfoDao extends JpaRepository<UserInfoEntity, Long> {
    // Custom query methods, if necessary
}
6. Testing the PATCH Endpoint
Once you have implemented the above, you can test the PATCH endpoint using tools like Postman or cURL:

Example PATCH Request (Postman):
URL: http://localhost:8080/users/1
Method: PATCH
Body (JSON):
json
Copy code
{
    "phoneNo": "1234567890",
    "panCardNo": "ABCDE1234F"
}
Example PATCH Request (cURL):
bash
Copy code
curl -X PATCH http://localhost:8080/users/1 \
  -H "Content-Type: application/json" \
  -d '{"phoneNo": "1234567890", "panCardNo": "ABCDE1234F"}'
7. Conclusion
This setup ensures:

You only update the phoneNo and panCardNo of the user without touching other fields.
The UserEntity is updated correctly via a service layer.
The controller exposes the endpoint for PATCH requests to update user details.
By using this approach, you maintain a clean separation of concerns between the controller, service, and DAO layers while allowing partial updates of user data. This method works well even when the UserEntity is related to other entities like CredsEntity and RolesEntity.





Yes, the Role and Cred tables should also have corresponding POJO classes and DAO interfaces with implementations if they are part of your system. Here’s how you can include them:

POJO Classes
Role.java
java
Copy code
package com.zcsd.model;

public class Role {
    private int roleId;
    private String roleName;

    public Role(int roleId, String roleName) {
        this.roleId = roleId;
        this.roleName = roleName;
    }

    // Getters and Setters
    public int getRoleId() {
        return roleId;
    }

    public void setRoleId(int roleId) {
        this.roleId = roleId;
    }

    public String getRoleName() {
        return roleName;
    }

    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }
}
Cred.java
java
Copy code
package com.zcsd.model;

public class Cred {
    private int uid;
    private int roleId;
    private String email;
    private String password;

    public Cred(int uid, int roleId, String email, String password) {
        this.uid = uid;
        this.roleId = roleId;
        this.email = email;
        this.password = password;
    }

    // Getters and Setters
    public int getUid() {
        return uid;
    }

    public void setUid(int uid) {
        this.uid = uid;
    }

    public int getRoleId() {
        return roleId;
    }

    public void setRoleId(int roleId) {
        this.roleId = roleId;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
DAO Interfaces
RoleDao.java
java
Copy code
package com.zcsd.dao;

import java.util.List;
import com.zcsd.model.Role;

public interface RoleDao {
    List<Role> fetchAllRoles();
    Role fetchRoleById(int roleId);
    Role addRole(Role newRole);
    Role updateRole(Role updateRole);
    void deleteRole(int roleId);
}
CredDao.java
java
Copy code
package com.zcsd.dao;

import java.util.List;
import com.zcsd.model.Cred;

public interface CredDao {
    List<Cred> fetchAllCreds();
    Cred fetchCredById(int uid);
    Cred addCred(Cred newCred);
    Cred updateCred(Cred updateCred);
    void deleteCred(int uid);
}
DAO Implementations
RoleDaoJdbcImpl.java
java
Copy code
package com.zcsd.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.zcsd.model.Role;

public class RoleDaoJdbcImpl implements RoleDao {

    @Override
    public List<Role> fetchAllRoles() {
        Connection conn = DBUtil.makeConnection();
        List<Role> roles = new ArrayList<>();
        try {
            String query = "SELECT * FROM Roles";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                Role role = new Role(rs.getInt("role_id"), rs.getString("role_name"));
                roles.add(role);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return roles;
    }

    @Override
    public Role fetchRoleById(int roleId) {
        Connection conn = DBUtil.makeConnection();
        Role role = null;
        try {
            String query = "SELECT * FROM Roles WHERE role_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, roleId);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                role = new Role(rs.getInt("role_id"), rs.getString("role_name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return role;
    }

    @Override
    public Role addRole(Role newRole) {
        Connection conn = DBUtil.makeConnection();
        try {
            String query = "INSERT INTO Roles (role_id, role_name) VALUES (?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, newRole.getRoleId());
            stmt.setString(2, newRole.getRoleName());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return newRole;
    }

    @Override
    public Role updateRole(Role updateRole) {
        Connection conn = DBUtil.makeConnection();
        try {
            String query = "UPDATE Roles SET role_name = ? WHERE role_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, updateRole.getRoleName());
            stmt.setInt(2, updateRole.getRoleId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return updateRole;
    }

    @Override
    public void deleteRole(int roleId) {
        Connection conn = DBUtil.makeConnection();
        try {
            String query = "DELETE FROM Roles WHERE role_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, roleId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
CredDaoJdbcImpl.java
java
Copy code
package com.zcsd.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.zcsd.model.Cred;

public class CredDaoJdbcImpl implements CredDao {

    @Override
    public List<Cred> fetchAllCreds() {
        Connection conn = DBUtil.makeConnection();
        List<Cred> creds = new ArrayList<>();
        try {
            String query = "SELECT * FROM Creds";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                Cred cred = new Cred(rs.getInt("uid"), rs.getInt("role_id"), rs.getString("email"), rs.getString("password"));
                creds.add(cred);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return creds;
    }

    @Override
    public Cred fetchCredById(int uid) {
        Connection conn = DBUtil.makeConnection();
        Cred cred = null;
        try {
            String query = "SELECT * FROM Creds WHERE uid = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, uid);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                cred = new Cred(rs.getInt("uid"), rs.getInt("role_id"), rs.getString("email"), rs.getString("password"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cred;
    }

    @Override
    public Cred addCred(Cred newCred) {
        Connection conn = DBUtil.makeConnection();
        try {
            String query = "INSERT INTO Creds (uid, role_id, email, password) VALUES (?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, newCred.getUid());
            stmt.setInt(2, newCred.getRoleId());
            stmt.setString(3, newCred.getEmail());
            stmt.setString(4, newCred.getPassword());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return newCred;
    }

    @Override
    public Cred updateCred(Cred updateCred) {
        Connection conn = DBUtil.makeConnection();
        try {
            String query = "UPDATE Creds SET role_id = ?, email = ?, password = ? WHERE uid = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, updateCred.getRoleId());
            stmt.setString(2, updateCred.getEmail());
            stmt.setString(3, updateCred.getPassword());
            stmt.setInt(4, updateCred.getUid());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return updateCred;
    }

    @Override
    public void deleteCred(int uid) {
        Connection conn = DBUtil.makeConnection();
        try {
            String query = "DELETE FROM Creds WHERE uid = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, uid);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
DBQueries.java
Here's the updated DBQueries.java with SQL queries for the Role and Cred tables:

java
Copy code
package com.zcsd.dao;

public class DBQueries {
    // Existing queries

    // Role Queries
    public static final String FETCH_ALL_ROLES = "SELECT * FROM Roles";
    public static final String FETCH_ROLE_BY_ID = "SELECT * FROM Roles WHERE role_id = ?";
    public static final String INSERT_ROLE = "INSERT INTO Roles (role_id, role_name) VALUES (?, ?)";
    public static final String UPDATE_ROLE = "UPDATE Roles SET role_name = ? WHERE role_id = ?";
    public static final String DELETE_ROLE = "DELETE FROM Roles WHERE role_id = ?";

    // Cred Queries
    public static final String FETCH_ALL_CREDS = "SELECT * FROM Creds";
    public static final String FETCH_CRED_BY_ID = "SELECT * FROM Creds WHERE uid = ?";
    public static final String INSERT_CRED = "INSERT INTO Creds (uid, role_id, email, password) VALUES (?, ?, ?, ?)";
    public static final String UPDATE_CRED = "UPDATE Creds SET role_id = ?, email = ?, password = ? WHERE uid = ?";
    public static final String DELETE_CRED = "DELETE FROM Creds WHERE uid = ?";
}
With these additions, you now have the POJO, DAO interfaces, and their implementations for Role and Cred as well. You can integrate these components into your existing codebase similarly to the other entities.






You said:
Shud they be in presentation or service ?Are they neccessary actually?
ChatGPT said:
ChatGPT
The Role and Cred tables, like other core entities in your application, should ideally be managed through both the Service and Presentation layers. Here's why each layer is necessary and what role it plays:

1. Service Layer
Role of Service Layer:

Business Logic: Contains the core business logic for handling Role and Cred entities. This includes operations such as creating, updating, deleting, and retrieving these records.
Validation: Implements validation rules and any other business rules.
Transactional Management: Manages transactions to ensure data consistency and integrity.
Importance:

The Service layer provides a centralized place for business logic, ensuring that all operations on Role and Cred are performed consistently and correctly.
2. Presentation Layer
Role of Presentation Layer:

User Interface: Interacts with users and presents data about Role and Cred entities.
Input Handling: Collects input from users and passes it to the Service layer.
Display: Formats and displays the results from the Service layer to the user.
Importance:

The Presentation layer allows users to interact with the system and view or modify Role and Cred data through a user-friendly interface.
In Summary:
Yes, they are necessary because they help manage different aspects of the application. Without these layers, you would lack organization and separation of concerns, making your application harder to maintain and extend.
Service Layer should handle the business logic and interact with the DAO layer.
Presentation Layer should handle user interactions and display data.
Example Integration
Service Layer
RoleService.java
java
Copy code
package com.zcsd.service;

import java.util.List;
import com.zcsd.model.Role;

public interface RoleService {
    List<Role> getAllRoles();
    Role getRoleById(int roleId);
    Role createRole(Role role);
    Role updateRole(Role role);
    void deleteRole(int roleId);
}
RoleServiceImpl.java
java
Copy code
package com.zcsd.service;

import java.util.List;
import com.zcsd.dao.RoleDao;
import com.zcsd.dao.RoleDaoJdbcImpl;
import com.zcsd.model.Role;

public class RoleServiceImpl implements RoleService {

    private RoleDao roleDao = new RoleDaoJdbcImpl();

    @Override
    public List<Role> getAllRoles() {
        return roleDao.fetchAllRoles();
    }

    @Override
    public Role getRoleById(int roleId) {
        return roleDao.fetchRoleById(roleId);
    }

    @Override
    public Role createRole(Role role) {
        return roleDao.addRole(role);
    }

    @Override
    public Role updateRole(Role role) {
        return roleDao.updateRole(role);
    }

    @Override
    public void deleteRole(int roleId) {
        roleDao.deleteRole(roleId);
    }
}
CredService.java
java
Copy code
package com.zcsd.service;

import java.util.List;
import com.zcsd.model.Cred;

public interface CredService {
    List<Cred> getAllCreds();
    Cred getCredById(int uid);
    Cred createCred(Cred cred);
    Cred updateCred(Cred cred);
    void deleteCred(int uid);
}
CredServiceImpl.java
java
Copy code
package com.zcsd.service;

import java.util.List;
import com.zcsd.dao.CredDao;
import com.zcsd.dao.CredDaoJdbcImpl;
import com.zcsd.model.Cred;

public class CredServiceImpl implements CredService {

    private CredDao credDao = new CredDaoJdbcImpl();

    @Override
    public List<Cred> getAllCreds() {
        return credDao.fetchAllCreds();
    }

    @Override
    public Cred getCredById(int uid) {
        return credDao.fetchCredById(uid);
    }

    @Override
    public Cred createCred(Cred cred) {
        return credDao.addCred(cred);
    }

    @Override
    public Cred updateCred(Cred cred) {
        return credDao.updateCred(cred);
    }

    @Override
    public void deleteCred(int uid) {
        credDao.deleteCred(uid);
    }
}
Presentation Layer
RoleManagement.java
java
Copy code
package com.zcsd.presentation;

import java.util.List;
import java.util.Scanner;
import com.zcsd.model.Role;
import com.zcsd.service.RoleService;
import com.zcsd.service.RoleServiceImpl;

public class RoleManagement {

    private RoleService roleService = new RoleServiceImpl();
    private Scanner scanner = new Scanner(System.in);

    public void presentRoleMenu() {
        System.out.println("Role Management Menu:");
        System.out.println("1. View All Roles");
        System.out.println("2. View Role by ID");
        System.out.println("3. Add Role");
        System.out.println("4. Update Role");
        System.out.println("5. Delete Role");
        System.out.println("6. Exit");

        int choice = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        switch (choice) {
            case 1:
                List<Role> roles = roleService.getAllRoles();
                for (Role role : roles) {
                    System.out.println(role.getRoleId() + ": " + role.getRoleName());
                }
                break;
            case 2:
                System.out.print("Enter Role ID: ");
                int roleId = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                Role role = roleService.getRoleById(roleId);
                if (role != null) {
                    System.out.println(role.getRoleId() + ": " + role.getRoleName());
                } else {
                    System.out.println("Role not found.");
                }
                break;
            case 3:
                System.out.print("Enter Role ID: ");
                int newRoleId = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter Role Name: ");
                String roleName = scanner.nextLine();
                Role newRole = new Role(newRoleId, roleName);
                roleService.createRole(newRole);
                System.out.println("Role added.");
                break;
            case 4:
                System.out.print("Enter Role ID: ");
                int updateRoleId = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter New Role Name: ");
                String updateRoleName = scanner.nextLine();
                Role updateRole = new Role(updateRoleId, updateRoleName);
                roleService.updateRole(updateRole);
                System.out.println("Role updated.");
                break;
            case 5:
                System.out.print("Enter Role ID to delete: ");
                int deleteRoleId = scanner.nextInt();
                roleService.deleteRole(deleteRoleId);
                System.out.println("Role deleted.");
                break;
            case 6:
                return;
            default:
                System.out.println("Invalid choice.");
        }
    }
}
CredManagement.java
java
Copy code
package com.zcsd.presentation;

import java.util.List;
import java.util.Scanner;
import com.zcsd.model.Cred;
import com.zcsd.service.CredService;
import com.zcsd.service.CredServiceImpl;

public class CredManagement {

    private CredService credService = new CredServiceImpl();
    private Scanner scanner = new Scanner(System.in);

    public void presentCredMenu() {
        System.out.println("Cred Management Menu:");
        System.out.println("1. View All Creds");
        System.out.println("2. View Cred by ID");
        System.out.println("3. Add Cred");
        System.out.println("4. Update Cred");
        System.out.println("5. Delete Cred");
        System.out.println("6. Exit");

        int choice = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        switch (choice) {
            case 1:
                List<Cred> creds = credService.getAllCreds();
                for (Cred cred : creds) {
                    System.out.println(cred.getUid() + ": " + cred.getEmail() + " - Role ID: " + cred.getRoleId());
                }
                break;
            case 2:
                System.out.print("Enter Cred ID: ");
                int uid = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                Cred cred = credService.getCredById(uid);
                if (cred != null) {
                    System.out.println(cred.getUid() + ": " + cred.getEmail() + " - Role ID: " + cred.getRoleId());
                } else {
                    System.out.println("Cred not found.");
                }
                break;
            case 3:
                System.out.print("Enter UID: ");
                int newUid = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter Role ID: ");
                int roleId = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter Email: ");
                String email = scanner.nextLine();
                System.out.print("Enter Password: ");
                String password = scanner.nextLine();
                Cred newCred = new Cred(newUid, roleId, email, password);
                credService.createCred(newCred);
                System.out.println("Cred added.");
                break;
            case 4:
                System.out.print("Enter UID: ");
                int updateUid = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter New Role ID: ");
                int updateRoleId = scanner.nextInt();
                scanner.nextLine();  // Consume newline
                System.out.print("Enter New Email: ");
                String updateEmail = scanner.nextLine();
                System.out.print("Enter New Password: ");
                String updatePassword = scanner.nextLine();
                Cred updateCred = new Cred(updateUid, updateRoleId, updateEmail, updatePassword);
                credService.updateCred(updateCred);
                System.out.println("Cred updated.");
                break;
            case 5:
                System.out.print("Enter UID to delete: ");
                int deleteUid = scanner.nextInt();
                credService.deleteCred(deleteUid);
                System.out.println("Cred deleted.");
                break;
            case 6:
                return;
            default:
                System.out.println("Invalid choice.");
        }
    }
}
Directory Structure

plaintext
Copy code
ZenClassStudentDashboard
│
├── src
│   ├── com
│   │   ├── zcsd
│   │   │   ├── model
│   │   │   │   ├── Role.java
│   │   │   │   └── Cred.java
│   │   │   ├── dao
│   │   │   │   ├── RoleDao.java
│   │   │   │   ├── RoleDaoJdbcImpl.java
│   │   │   │   ├── CredDao.java
│   │   │   │   └── CredDaoJdbcImpl.java
│   │   │   ├── service
│   │   │   │   ├── RoleService.java
│   │   │   │   ├── RoleServiceImpl.java
│   │   │   │   ├── CredService.java
│   │   │   │   └── CredServiceImpl.java
│   │   │   └── presentation
│   │   │       ├── RoleManagement.java
│   │   │       └── CredManagement.java
│   │   ├── db
│   │   │   ├── DBQueries.java
│   │   │   ├── DBUtils.java
│   │   └── util
│   │       └── SomeUtilityClass.java
│   └── Main.java
└── resources
    └── database
        └── schema.sql

Explanation:

Model: Contains POJO classes.
DAO: Contains interfaces and their JDBC implementations for data access.
Service: Contains service interfaces and their implementations with business logic.
Presentation: Contains classes that handle user interactions and display data.
DB: Contains SQL queries and database utilities.
Util: Contains utility classes for various functions.
Main.java: Entry point for your application.
This structure keeps your application modular and maintainable.


